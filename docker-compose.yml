services:
  # OpenSearch pour recherche textuelle
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: scw-opensearch
    environment:
      - cluster.name=medical-search-cluster
      - node.name=medical-search-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
      - ./config/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
    ports:
      - "9200:9200"
    networks:
      - medical-search-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cat/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL avec pgvector pour embeddings
  postgres:
    image: pgvector/pgvector:pg15
    container_name: scw-postgres
    environment:
      POSTGRES_DB: medical_search
      POSTGRES_USER: medical_user
      POSTGRES_PASSWORD: medical_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql
    ports:
      - "5432:5432"
    networks:
      - medical-search-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medical_user -d medical_search"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour cache intelligent
  redis:
    image: redis:7-alpine
    container_name: scw-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - medical-search-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Service de traitement des documents
  processing-service:
    build:
      context: ./services/processing
      dockerfile: Dockerfile
    container_name: scw-processing
    environment:
      - OPENSEARCH_URL=http://opensearch:9200
      - POSTGRES_URL=postgresql://medical_user:medical_password@postgres:5432/medical_search
      - REDIS_URL=redis://redis:6379
      - MODEL_NAME=sentence-transformers/all-MiniLM-L12-v2
      - MEDICAL_MODEL_NAME=emilyalsentzer/Bio_ClinicalBERT
    volumes:
      - ./data/uploads:/app/uploads
      - ./data/processed:/app/processed
      - ./models:/app/models
    ports:
      - "8001:8001"
    depends_on:
      opensearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medical-search-network
    restart: unless-stopped

  # API de recherche
  search-api:
    build:
      context: ./services/search-api
      dockerfile: Dockerfile
    container_name: scw-search-api
    environment:
      - OPENSEARCH_URL=http://opensearch:9200
      - POSTGRES_URL=postgresql://medical_user:medical_password@postgres:5432/medical_search
      - REDIS_URL=redis://redis:6379
      - API_PORT=8000
    ports:
      - "8000:8000"
    depends_on:
      opensearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medical-search-network
    restart: unless-stopped

  # Interface web
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: scw-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - search-api
    networks:
      - medical-search-network
    restart: unless-stopped

  # Service d'initialisation
  init-services:
    build:
      context: ./services/init
      dockerfile: Dockerfile
    container_name: scw-init
    environment:
      - OPENSEARCH_URL=http://opensearch:9200
      - POSTGRES_URL=postgresql://medical_user:medical_password@postgres:5432/medical_search
    depends_on:
      opensearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - medical-search-network
    restart: "no"

volumes:
  opensearch-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  medical-search-network:
    driver: bridge